# ssserver[1580]: 2018-08-17 09:42:55 INFO     connecting 8.8.8.8:53 from 107.77.244.95:43944
# ssserver[1580]: 2018-08-17 20:08:15 ERROR    can not parse header when handling connection from 107.77.244.87:43584
# ss-server[1584]: 2018-08-17 09:43:04 ERROR: failed to handshake with 107.77.244.87: authentication error

# sshd[5761]: Failed password for root from 218.87.111.109 port 45712 ssh2
# sshd[22101]: Failed password for invalid user test from 115.68.23.130 port 43092 ssh2
# sshd[730]: Accepted publickey for username from 192.168.1.225 port 38783 ssh2: RSA 01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10
# sshd[816]: Accepted password for username from 192.168.1.225 port 38786 ssh2
# sshd[25978]: Disconnected from authenticating user root 107.77.244.95 port 45992 [preauth]
filter {
  if "rsyslog" in [tags] {
    grok {
      match => {"message" => ["%{SYSLOGBASE} %{GREEDYDATA:message}"]}
      overwrite => ["message"]
    }

    if [program] == "ssserver" or [program] == "ss-server" {
      grok {
        match => {"message" => [
          "%{TIMESTAMP_ISO8601} %{LOGLEVEL:log_level}%{SPACE}connecting %{IP}:%{NUMBER} from %{IP:client_ip}:%{NUMBER:client_port}",
          "%{TIMESTAMP_ISO8601} %{LOGLEVEL:log_level}%{SPACE}can not parse header when handling connection from %{IP:client_ip}:%{NUMBER:client_port}",
          "%{TIMESTAMP_ISO8601} %{LOGLEVEL:log_level}: failed to handshake with %{IP:client_ip}: authentication error"
        ]}

        remove_field => ["message"]
      }

      geoip {
        source => "client_ip"
      }
    } else if [program] == 'sshd' {
      grok {
        match => { "message" => [
          "%{DATA:[ssh][event]} %{DATA:[ssh][method]} for (invalid user )?%{DATA:[user]} from %{IPORHOST:client_ip} port %{NUMBER:client_port} ssh2(: %{GREEDYDATA:[ssh][signature]})?",
          "%{DATA:[ssh][event]} user %{DATA:[user]} from %{IPORHOST:client_ip}",
          "%{DATA:[ssh][event]} from ((authenticating )?user %{DATA:user} )?%{IPORHOST:client_ip} port %{NUMBER:client_port}\s*(?:\[%{GREEDYDATA:[ssh][privsep]}\]|)",
          "Did not receive identification string from %{IPORHOST:client_ip}"
        ]}
      }

      geoip {
        source => "client_ip"
      }
    } else if [program] == 'sudo' {
      grok {
        match => { "message" => ["\s*%{DATA:[user]} :( %{DATA:[sudo][error]} ;)? TTY=%{DATA:[sudo][tty]} ; PWD=%{DATA:[sudo][pwd]} ; USER=%{DATA:[sudo][user]} ; COMMAND=%{GREEDYDATA:[sudo][command]}"]}
      }
    } else {
      drop { }
    }
  }
}
